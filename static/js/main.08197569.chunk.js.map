{"version":3,"sources":["components/TR/TR.js","components/Dropdown/Dropdown.js","components/Jumbotron/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["TR","props","src","employee","picture","large","alt","name","first","title","last","email","phone","cell","gender","location","city","state","country","Dropdown","className","type","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","value","onClick","this","handleFilter","Component","Jumbotron","handleSort","App","employees","event","preventDefault","sort","a","b","setState","console","log","target","axios","get","then","data","results","catch","err","error","scope","map","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.08197569.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst TR = (props) => {\r\n  return (\r\n    <tr>\r\n      <td><img src={props.employee.picture.large} alt={props.employee.name.first} /></td>\r\n      <td>{props.employee.name.title} {props.employee.name.first} {props.employee.name.last}</td>\r\n      <td>{props.employee.email}</td>\r\n      <td>{props.employee.phone}</td>\r\n      <td>{props.employee.cell}</td>\r\n      <td>{props.employee.gender}</td>\r\n      <td>{props.employee.location.city}, {props.employee.location.state}, {props.employee.location.country}</td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default TR\r\n\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\n\r\nclass Dropdown extends Component {\r\n\r\n  render() {\r\n\r\n\r\n    return (\r\n      <>\r\n        <div className=\"dropdown d-inline\">\r\n          <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n            Filter by Country\r\n            </button>\r\n\r\n          <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n            <option className=\"dropdown-item\" value=\"\" onClick={this.props.handleFilter}>All Countries</option>\r\n            <option className=\"dropdown-item\" value=\"AU\" onClick={this.props.handleFilter}>Australia</option>\r\n            <option className=\"dropdown-item\" value=\"BR\" onClick={this.props.handleFilter}>Brazil</option>\r\n            <option className=\"dropdown-item\" value=\"CA\" onClick={this.props.handleFilter}>Canada</option>\r\n            <option className=\"dropdown-item\" value=\"DK\" onClick={this.props.handleFilter}>Denmark</option>\r\n            <option className=\"dropdown-item\" value=\"FI\" onClick={this.props.handleFilter}>Finland</option>\r\n            <option className=\"dropdown-item\" value=\"FR\" onClick={this.props.handleFilter}>France</option>\r\n            <option className=\"dropdown-item\" value=\"DE\" onClick={this.props.handleFilter}>Germany</option>\r\n            <option className=\"dropdown-item\" value=\"IR\" onClick={this.props.handleFilter}>Iran</option>\r\n            <option className=\"dropdown-item\" value=\"IE\" onClick={this.props.handleFilter}>Ireland</option>\r\n            <option className=\"dropdown-item\" value=\"NL\" onClick={this.props.handleFilter}>Netherlands</option>\r\n            <option className=\"dropdown-item\" value=\"NZ\" onClick={this.props.handleFilter}>New Zealand</option>\r\n            <option className=\"dropdown-item\" value=\"NO\" onClick={this.props.handleFilter}>Norway</option>\r\n            <option className=\"dropdown-item\" value=\"ES\" onClick={this.props.handleFilter}>Spain</option>\r\n            <option className=\"dropdown-item\" value=\"CH\" onClick={this.props.handleFilter}>Switzerland</option>\r\n            <option className=\"dropdown-item\" value=\"TR\" onClick={this.props.handleFilter}>Turkey</option>\r\n            <option className=\"dropdown-item\" value=\"GB\" onClick={this.props.handleFilter}>United Kingdom</option>\r\n            <option className=\"dropdown-item\" value=\"US\" onClick={this.props.handleFilter}>United States</option>\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\nexport default Dropdown","import React, { Component } from 'react'\r\nimport Dropdown from '../Dropdown'\r\nimport './Jumbotron.css'\r\n\r\nclass Jumbotron extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"jumbotron text-center\">\r\n        <h1 className=\"display-4\">Employee Directory</h1>\r\n        <p className=\"lead\">This is a simple app to view and filter employee directory records built using React.</p>\r\n        <hr className=\"my-4\" />\r\n        <div className=\"d-flex justify-content-around\">\r\n          <button className=\"btn btn-primary d-inline\" value=\"last\" onClick={this.props.handleSort}>Sort by Last Name</button>\r\n          <Dropdown handleFilter={this.props.handleFilter}/>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Jumbotron","import React, { Component } from 'react'\nimport TR from './components/TR'\n// import Dropdown from './components/Dropdown'\nimport Jumbotron from './components/Jumbotron'\nimport axios from 'axios'\n// import './App.css'\n\n\nclass App extends Component {\n\n  state = {\n    employees: []\n  }\n\n  componentDidMount() {\n    axios.get(`https://randomuser.me/api?results=20`)\n      .then(({ data }) => {\n        this.setState({ employees: data.results })\n      })\n      .catch(err => console.error(err))\n  }\n\n  handleSort = event => {\n    event.preventDefault()\n    let employees = this.state.employees.sort((a, b) => (a.name.last > b.name.last) ? 1 : -1)\n    this.setState({ employees: employees })\n  }\n\n  handleFilter = event => {\n    event.preventDefault()\n    console.log(event.target.value)\n    axios.get(`https://randomuser.me/api?results=20&nat=${event.target.value}`)\n      .then(({ data }) => {\n        this.setState({ employees: data.results })\n      })\n      .catch(err => console.error(err))\n  }\n\n\n  render() {\n    return (\n\n\n      <>\n        <div className=\"container-fluid\">\n          <Jumbotron handleSort={this.handleSort} handleFilter={this.handleFilter}/>\n\n          <table className=\"table table-striped table-hover\">\n            <thead>\n              <tr>\n                <th scope=\"col\">Picture</th>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Phone</th>\n                <th scope=\"col\">Cell</th>\n                <th scope=\"col\">Gender</th>\n                <th scope=\"col\">Location</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                this.state.employees.map(employee => <TR employee={employee} />)\n              }\n            </tbody>\n          </table>\n        </div>\n\n\n      </>\n    )\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}